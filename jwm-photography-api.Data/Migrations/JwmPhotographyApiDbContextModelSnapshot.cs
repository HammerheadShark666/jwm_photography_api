// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using jwm_photography_api.Data.Contexts;

#nullable disable

namespace jwm_photography_api.Data.Migrations
{
    [DbContext(typeof(JwmPhotographyApiDbContext))]
    partial class JwmPhotographyApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("jwm_photography_api.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("IsAuthenticated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("CAST(CASE WHEN Verified IS NOT NULL OR PasswordReset IS NOT NULL THEN 1 ELSE 0 END AS bit)", true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("Id");

                    b.ToTable("JWM_PHOTO_Account");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("JWM_PHOTO_Category");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("JWM_PHOTO_Country");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Favourite", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("JWM_PHOTO_Favourite");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("JWM_PHOTO_Gallery");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.GalleryPhoto", b =>
                {
                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("GalleryId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("JWM_PHOTO_GalleryPhoto");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Palette", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("Id");

                    b.ToTable("JWM_PHOTO_Palette");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApertureValue")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Camera")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateTaken")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("ExposureProgram")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExposureTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FocalLength")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("Iso")
                        .HasColumnType("int");

                    b.Property<string>("Lens")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Orientation")
                        .HasColumnType("int");

                    b.Property<int?>("PaletteId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("UseInMontage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PaletteId");

                    b.ToTable("JWM_PHOTO_Photo");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("IsExpired")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("CAST(CASE WHEN GETDATE() >= Expires THEN 1 ELSE 0 END AS bit)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("JWM_PHOTO_RefreshToken");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.UserGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("JWM_PHOTO_UserGallery");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.UserGalleryPhoto", b =>
                {
                    b.Property<int>("UserGalleryId")
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("UserGalleryId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("JWM_PHOTO_UserGalleryPhoto");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Favourite", b =>
                {
                    b.HasOne("jwm_photography_api.Domain.Photo", "Photo")
                        .WithMany("Favourites")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.GalleryPhoto", b =>
                {
                    b.HasOne("jwm_photography_api.Domain.Gallery", "Gallery")
                        .WithMany("Photos")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jwm_photography_api.Domain.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Photo", b =>
                {
                    b.HasOne("jwm_photography_api.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("jwm_photography_api.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("jwm_photography_api.Domain.Palette", "Palette")
                        .WithMany()
                        .HasForeignKey("PaletteId");

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("Palette");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.RefreshToken", b =>
                {
                    b.HasOne("jwm_photography_api.Domain.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.UserGalleryPhoto", b =>
                {
                    b.HasOne("jwm_photography_api.Domain.Photo", "Photo")
                        .WithMany("UserGalleryPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("jwm_photography_api.Domain.UserGallery", "UserGallery")
                        .WithMany("Photos")
                        .HasForeignKey("UserGalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("UserGallery");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Account", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Gallery", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.Photo", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("UserGalleryPhotos");
                });

            modelBuilder.Entity("jwm_photography_api.Domain.UserGallery", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
